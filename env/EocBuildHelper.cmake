cmake_minimum_required(VERSION 3.8)
if(NOT DEFINED EOC_BUILD_HELPER_INCLUDED)
	set(EOC_BUILD_HELPER_INCLUDED 1)
	
	if(NOT DEFINED EOC_HOME)
		set(EOC_HOME ${CMAKE_CURRENT_LIST_DIR})
	endif()
	set(EOC_LIBS_DIRS ${EOC_HOME}/lib)
	set(EOC_THIRD_PARTY_DIRS ${EOC_HOME}/3rd-party)
	set(CMAKE_USER_MAKE_RULES_OVERRIDE ${CMAKE_CURRENT_LIST_DIR}/c_flag_overrides.cmake)
	set(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX ${CMAKE_CURRENT_LIST_DIR}/cxx_flag_overrides.cmake)

	list(APPEND CMAKE_PREFIX_PATH ${EOC_THIRD_PARTY_DIRS})

	macro (target_link_eoc_lib ARG_TARGET ARG_INTERNAL_NAME ARG_RPOJECT_NAME)
		if(NOT DEFINED ${ARG_RPOJECT_NAME}_FOUND)
			include(${EOC_LIBS_DIRS}/${ARG_INTERNAL_NAME}/config.cmake)
		endif()
		if(NOT ${ARG_RPOJECT_NAME}_FOUND)
			error("Can't find ${ARG_RPOJECT_NAME} (eoc internal name: ${ARG_INTERNAL_NAME})")
		endif()

		get_target_property(_TARGET_TYPE ${ARG_TARGET} TYPE)
		if(_TARGET_TYPE STREQUAL "INTERFACE_LIBRARY")
			set(_ACCESS_MODE INTERFACE)
		else()
			set(_ACCESS_MODE PUBLIC)
		endif()

		if(DEFINED ${ARG_RPOJECT_NAME}_INCLUDE_DIRS)
			target_include_directories(${ARG_TARGET} ${_ACCESS_MODE} ${${ARG_RPOJECT_NAME}_INCLUDE_DIRS})
		endif()
		if(DEFINED ${ARG_RPOJECT_NAME}_LIBRARIES)
			target_link_libraries(${ARG_TARGET} ${_ACCESS_MODE} ${${ARG_RPOJECT_NAME}_LIBRARIES})
		else()
			if(TARGET ${ARG_RPOJECT_NAME})
				target_link_libraries(${ARG_TARGET} ${_ACCESS_MODE} ${ARG_RPOJECT_NAME})
			endif()
		endif()
	endmacro ()
endif()